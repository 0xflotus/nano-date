{"version":3,"file":"nano-date.js","sources":["../node_modules/core-decorators/es/lazy-initialize.js","../node_modules/core-decorators/es/private/utils.js","../node_modules/core-decorators/es/override.js","../node_modules/core-decorators/es/deprecate.js","../node_modules/core-decorators/es/autobind.js","../node_modules/core-decorators/es/decorate.js","../node_modules/map-or-similar/src/similar.js","../node_modules/memoizerific/src/memoizerific.js","../src/index.js","../node_modules/bignumber.js/bignumber.js","../node_modules/core-decorators/es/time.js","../node_modules/core-decorators/es/profile.js","../node_modules/map-or-similar/src/map-or-similar.js"],"sourcesContent":["import { decorate, createDefaultSetter } from './private/utils';\nvar defineProperty = Object.defineProperty;\n\n\nfunction handleDescriptor(target, key, descriptor) {\n  var configurable = descriptor.configurable,\n      enumerable = descriptor.enumerable,\n      initializer = descriptor.initializer,\n      value = descriptor.value;\n\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n\n    get: function get() {\n      // This happens if someone accesses the\n      // property directly on the prototype\n      if (this === target) {\n        return;\n      }\n\n      var ret = initializer ? initializer.call(this) : value;\n\n      defineProperty(this, key, {\n        configurable: configurable,\n        enumerable: enumerable,\n        writable: true,\n        value: ret\n      });\n\n      return ret;\n    },\n\n\n    set: createDefaultSetter(key)\n  };\n}\n\nexport default function lazyInitialize() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nfunction _initDefineProp(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nfunction _initializerWarningHelper(descriptor, context) {\n  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');\n}\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport lazyInitialize from '../lazy-initialize';\n\nvar defineProperty = Object.defineProperty,\n    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n    getOwnPropertyNames = Object.getOwnPropertyNames,\n    getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n\nexport function isDescriptor(desc) {\n  if (!desc || !desc.hasOwnProperty) {\n    return false;\n  }\n\n  var keys = ['value', 'initializer', 'get', 'set'];\n\n  for (var i = 0, l = keys.length; i < l; i++) {\n    if (desc.hasOwnProperty(keys[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function decorate(handleDescriptor, entryArgs) {\n  if (isDescriptor(entryArgs[entryArgs.length - 1])) {\n    return handleDescriptor.apply(undefined, _toConsumableArray(entryArgs).concat([[]]));\n  } else {\n    return function () {\n      return handleDescriptor.apply(undefined, _toConsumableArray(Array.prototype.slice.call(arguments)).concat([entryArgs]));\n    };\n  }\n}\n\nvar Meta = (_class = function Meta() {\n  _classCallCheck(this, Meta);\n\n  _initDefineProp(this, 'debounceTimeoutIds', _descriptor, this);\n\n  _initDefineProp(this, 'throttleTimeoutIds', _descriptor2, this);\n\n  _initDefineProp(this, 'throttlePreviousTimestamps', _descriptor3, this);\n\n  _initDefineProp(this, 'throttleTrailingArgs', _descriptor4, this);\n\n  _initDefineProp(this, 'profileLastRan', _descriptor5, this);\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'debounceTimeoutIds', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'throttleTimeoutIds', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'throttlePreviousTimestamps', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'throttleTrailingArgs', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'profileLastRan', [lazyInitialize], {\n  enumerable: true,\n  initializer: function initializer() {\n    return null;\n  }\n})), _class);\n\n\nvar META_KEY = typeof Symbol === 'function' ? Symbol('__core_decorators__') : '__core_decorators__';\n\nexport function metaFor(obj) {\n  if (obj.hasOwnProperty(META_KEY) === false) {\n    defineProperty(obj, META_KEY, {\n      // Defaults: NOT enumerable, configurable, or writable\n      value: new Meta()\n    });\n  }\n\n  return obj[META_KEY];\n}\n\nexport var getOwnKeys = getOwnPropertySymbols ? function (object) {\n  return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n} : getOwnPropertyNames;\n\nexport function getOwnPropertyDescriptors(obj) {\n  var descs = {};\n\n  getOwnKeys(obj).forEach(function (key) {\n    return descs[key] = getOwnPropertyDescriptor(obj, key);\n  });\n\n  return descs;\n}\n\nexport function createDefaultSetter(key) {\n  return function set(newValue) {\n    Object.defineProperty(this, key, {\n      configurable: true,\n      writable: true,\n      // IS enumerable when reassigned by the outside word\n      enumerable: true,\n      value: newValue\n    });\n\n    return newValue;\n  };\n}\n\nexport function bind(fn, context) {\n  if (fn.bind) {\n    return fn.bind(context);\n  } else {\n    return function __autobind__() {\n      return fn.apply(context, arguments);\n    };\n  }\n}\n\nexport var warn = function () {\n  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) !== 'object' || !console || typeof console.warn !== 'function') {\n    return function () {};\n  } else {\n    return bind(console.warn, console);\n  }\n}();\n\nvar seenDeprecations = {};\nexport function internalDeprecation(msg) {\n  if (seenDeprecations[msg] !== true) {\n    seenDeprecations[msg] = true;\n    warn('DEPRECATION: ' + msg);\n  }\n}","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { decorate } from './private/utils';\n\nvar GENERIC_FUNCTION_ERROR = '{child} does not properly override {parent}';\nvar FUNCTION_REGEXP = /^function ([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?(\\([^\\)]*\\))[\\s\\S]+$/;\n\nvar SyntaxErrorReporter = function () {\n  _createClass(SyntaxErrorReporter, [{\n    key: '_getTopic',\n    value: function _getTopic(descriptor) {\n      if (descriptor === undefined) {\n        return null;\n      }\n\n      if ('value' in descriptor) {\n        return descriptor.value;\n      }\n\n      if ('get' in descriptor) {\n        return descriptor.get;\n      }\n\n      if ('set' in descriptor) {\n        return descriptor.set;\n      }\n    }\n  }, {\n    key: '_extractTopicSignature',\n    value: function _extractTopicSignature(topic) {\n      switch (typeof topic === 'undefined' ? 'undefined' : _typeof(topic)) {\n        case 'function':\n          return this._extractFunctionSignature(topic);\n        default:\n          return this.key;\n      }\n    }\n  }, {\n    key: '_extractFunctionSignature',\n    value: function _extractFunctionSignature(fn) {\n      var _this = this;\n\n      return fn.toString().replace(FUNCTION_REGEXP, function (match) {\n        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;\n        var params = arguments[2];\n        return name + params;\n      });\n    }\n  }, {\n    key: 'key',\n    get: function get() {\n      return this.childDescriptor.key;\n    }\n  }, {\n    key: 'parentNotation',\n    get: function get() {\n      return this.parentKlass.constructor.name + '#' + this.parentPropertySignature;\n    }\n  }, {\n    key: 'childNotation',\n    get: function get() {\n      return this.childKlass.constructor.name + '#' + this.childPropertySignature;\n    }\n  }, {\n    key: 'parentTopic',\n    get: function get() {\n      return this._getTopic(this.parentDescriptor);\n    }\n  }, {\n    key: 'childTopic',\n    get: function get() {\n      return this._getTopic(this.childDescriptor);\n    }\n  }, {\n    key: 'parentPropertySignature',\n    get: function get() {\n      return this._extractTopicSignature(this.parentTopic);\n    }\n  }, {\n    key: 'childPropertySignature',\n    get: function get() {\n      return this._extractTopicSignature(this.childTopic);\n    }\n  }]);\n\n  function SyntaxErrorReporter(parentKlass, childKlass, parentDescriptor, childDescriptor) {\n    _classCallCheck(this, SyntaxErrorReporter);\n\n    this.parentKlass = parentKlass;\n    this.childKlass = childKlass;\n    this.parentDescriptor = parentDescriptor;\n    this.childDescriptor = childDescriptor;\n  }\n\n  _createClass(SyntaxErrorReporter, [{\n    key: 'assert',\n    value: function assert(condition) {\n      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (condition !== true) {\n        this.error(GENERIC_FUNCTION_ERROR + msg);\n      }\n    }\n  }, {\n    key: 'error',\n    value: function error(msg) {\n      var _this2 = this;\n\n      msg = msg\n      // Replace lazily, because they actually might not\n      // be available in all cases\n      .replace('{parent}', function (m) {\n        return _this2.parentNotation;\n      }).replace('{child}', function (m) {\n        return _this2.childNotation;\n      });\n      throw new SyntaxError(msg);\n    }\n  }]);\n\n  return SyntaxErrorReporter;\n}();\n\nfunction getDescriptorType(descriptor) {\n  if (descriptor.hasOwnProperty('value')) {\n    return 'data';\n  }\n\n  if (descriptor.hasOwnProperty('get') || descriptor.hasOwnProperty('set')) {\n    return 'accessor';\n  }\n\n  // If none of them exist, browsers treat it as\n  // a data descriptor with a value of `undefined`\n  return 'data';\n}\n\nfunction checkFunctionSignatures(parent, child, reporter) {\n  reporter.assert(parent.length === child.length);\n}\n\nfunction checkDataDescriptors(parent, child, reporter) {\n  var parentValueType = _typeof(parent.value);\n  var childValueType = _typeof(child.value);\n\n  if (parentValueType === 'undefined' && childValueType === 'undefined') {\n    // class properties can be any expression, which isn't ran until the\n    // the instance is created, so we can't reliably get type information\n    // for them yet (per spec). Perhaps when Babel includes flow-type info\n    // in runtime? Tried regex solutions, but super hacky and only feasible\n    // on primitives, which is confusing for usage...\n    reporter.error('descriptor values are both undefined. (class properties are are not currently supported)\\'');\n  }\n\n  if (parentValueType !== childValueType) {\n    var isFunctionOverUndefined = childValueType === 'function' && parentValueType === undefined;\n    // Even though we don't support class properties, this\n    // will still handle more than just functions, just in case.\n    // Shadowing an undefined value is an error if the inherited\n    // value was undefined (usually a class property, not a method)\n    if (isFunctionOverUndefined || parentValueType !== undefined) {\n      reporter.error('value types do not match. {parent} is \"' + parentValueType + '\", {child} is \"' + childValueType + '\"');\n    }\n  }\n\n  // Switch, in preparation for supporting more types\n  switch (childValueType) {\n    case 'function':\n      checkFunctionSignatures(parent.value, child.value, reporter);\n      break;\n\n    default:\n      reporter.error('Unexpected error. Please file a bug with: {parent} is \"' + parentValueType + '\", {child} is \"' + childValueType + '\"');\n      break;\n  }\n}\n\nfunction checkAccessorDescriptors(parent, child, reporter) {\n  var parentHasGetter = typeof parent.get === 'function';\n  var childHasGetter = typeof child.get === 'function';\n  var parentHasSetter = typeof parent.set === 'function';\n  var childHasSetter = typeof child.set === 'function';\n\n  if (parentHasGetter || childHasGetter) {\n    if (!parentHasGetter && parentHasSetter) {\n      reporter.error('{parent} is setter but {child} is getter');\n    }\n\n    if (!childHasGetter && childHasSetter) {\n      reporter.error('{parent} is getter but {child} is setter');\n    }\n\n    checkFunctionSignatures(parent.get, child.get, reporter);\n  }\n\n  if (parentHasSetter || childHasSetter) {\n    if (!parentHasSetter && parentHasGetter) {\n      reporter.error('{parent} is getter but {child} is setter');\n    }\n\n    if (!childHasSetter && childHasGetter) {\n      reporter.error('{parent} is setter but {child} is getter');\n    }\n\n    checkFunctionSignatures(parent.set, child.set, reporter);\n  }\n}\n\nfunction checkDescriptors(parent, child, reporter) {\n  var parentType = getDescriptorType(parent);\n  var childType = getDescriptorType(child);\n\n  if (parentType !== childType) {\n    reporter.error('descriptor types do not match. {parent} is \"' + parentType + '\", {child} is \"' + childType + '\"');\n  }\n\n  switch (childType) {\n    case 'data':\n      checkDataDescriptors(parent, child, reporter);\n      break;\n\n    case 'accessor':\n      checkAccessorDescriptors(parent, child, reporter);\n      break;\n  }\n}\n\nvar suggestionTransforms = [function (key) {\n  return key.toLowerCase();\n}, function (key) {\n  return key.toUpperCase();\n}, function (key) {\n  return key + 's';\n}, function (key) {\n  return key.slice(0, -1);\n}, function (key) {\n  return key.slice(1, key.length);\n}];\n\nfunction findPossibleAlternatives(superKlass, key) {\n  for (var i = 0, l = suggestionTransforms.length; i < l; i++) {\n    var fn = suggestionTransforms[i];\n    var suggestion = fn(key);\n\n    if (suggestion in superKlass) {\n      return suggestion;\n    }\n  }\n\n  return null;\n}\n\nfunction handleDescriptor(target, key, descriptor) {\n  descriptor.key = key;\n  var superKlass = Object.getPrototypeOf(target);\n  var superDescriptor = Object.getOwnPropertyDescriptor(superKlass, key);\n  var reporter = new SyntaxErrorReporter(superKlass, target, superDescriptor, descriptor);\n\n  if (superDescriptor === undefined) {\n    var suggestedKey = findPossibleAlternatives(superKlass, key);\n    var suggestion = suggestedKey ? '\\n\\n  Did you mean \"' + suggestedKey + '\"?' : '';\n    reporter.error('No descriptor matching {child} was found on the prototype chain.' + suggestion);\n  }\n\n  checkDescriptors(superDescriptor, descriptor, reporter);\n\n  return descriptor;\n}\n\nexport default function override() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { decorate, warn } from './private/utils';\n\nvar DEFAULT_MSG = 'This function will be removed in future versions.';\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      _ref2$ = _ref2[0],\n      msg = _ref2$ === undefined ? DEFAULT_MSG : _ref2$,\n      _ref2$2 = _ref2[1],\n      options = _ref2$2 === undefined ? {} : _ref2$2;\n\n  if (typeof descriptor.value !== 'function') {\n    throw new SyntaxError('Only functions can be marked as deprecated');\n  }\n\n  var methodSignature = target.constructor.name + '#' + key;\n\n  if (options.url) {\n    msg += '\\n\\n    See ' + options.url + ' for more details.\\n\\n';\n  }\n\n  return _extends({}, descriptor, {\n    value: function deprecationWrapper() {\n      warn('DEPRECATION ' + methodSignature + ': ' + msg);\n      return descriptor.value.apply(this, arguments);\n    }\n  });\n}\n\nexport default function deprecate() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { decorate, createDefaultSetter, getOwnPropertyDescriptors, getOwnKeys, bind } from './private/utils';\nvar defineProperty = Object.defineProperty,\n    getPrototypeOf = Object.getPrototypeOf;\n\n\nvar mapStore = void 0;\n\nfunction getBoundSuper(obj, fn) {\n  if (typeof WeakMap === 'undefined') {\n    throw new Error('Using @autobind on ' + fn.name + '() requires WeakMap support due to its use of super.' + fn.name + '()\\n      See https://github.com/jayphelps/core-decorators.js/issues/20');\n  }\n\n  if (!mapStore) {\n    mapStore = new WeakMap();\n  }\n\n  if (mapStore.has(obj) === false) {\n    mapStore.set(obj, new WeakMap());\n  }\n\n  var superStore = mapStore.get(obj);\n\n  if (superStore.has(fn) === false) {\n    superStore.set(fn, bind(fn, obj));\n  }\n\n  return superStore.get(fn);\n}\n\nfunction autobindClass(klass) {\n  var descs = getOwnPropertyDescriptors(klass.prototype);\n  var keys = getOwnKeys(descs);\n\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    var desc = descs[key];\n\n    if (typeof desc.value !== 'function' || key === 'constructor') {\n      continue;\n    }\n\n    defineProperty(klass.prototype, key, autobindMethod(klass.prototype, key, desc));\n  }\n}\n\nfunction autobindMethod(target, key, _ref) {\n  var fn = _ref.value,\n      configurable = _ref.configurable,\n      enumerable = _ref.enumerable;\n\n  if (typeof fn !== 'function') {\n    throw new SyntaxError('@autobind can only be used on functions, not: ' + fn);\n  }\n\n  var constructor = target.constructor;\n\n\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n\n    get: function get() {\n      // Class.prototype.key lookup\n      // Someone accesses the property directly on the prototype on which it is\n      // actually defined on, i.e. Class.prototype.hasOwnProperty(key)\n      if (this === target) {\n        return fn;\n      }\n\n      // Class.prototype.key lookup\n      // Someone accesses the property directly on a prototype but it was found\n      // up the chain, not defined directly on it\n      // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype\n      if (this.constructor !== constructor && getPrototypeOf(this).constructor === constructor) {\n        return fn;\n      }\n\n      // Autobound method calling super.sameMethod() which is also autobound and so on.\n      if (this.constructor !== constructor && key in this.constructor.prototype) {\n        return getBoundSuper(this, fn);\n      }\n\n      var boundFn = bind(fn, this);\n\n      defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        // NOT enumerable when it's a bound method\n        enumerable: false,\n        value: boundFn\n      });\n\n      return boundFn;\n    },\n\n    set: createDefaultSetter(key)\n  };\n}\n\nfunction handle(args) {\n  if (args.length === 1) {\n    return autobindClass.apply(undefined, _toConsumableArray(args));\n  } else {\n    return autobindMethod.apply(undefined, _toConsumableArray(args));\n  }\n}\n\nexport default function autobind() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 0) {\n    return function () {\n      return handle(arguments);\n    };\n  } else {\n    return handle(args);\n  }\n}","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nimport { decorate as _decorate, createDefaultSetter } from './private/utils';\nvar defineProperty = Object.defineProperty;\n\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _toArray(_ref),\n      decorator = _ref2[0],\n      args = _ref2.slice(1);\n\n  var configurable = descriptor.configurable,\n      enumerable = descriptor.enumerable,\n      writable = descriptor.writable;\n\n  var originalGet = descriptor.get;\n  var originalSet = descriptor.set;\n  var originalValue = descriptor.value;\n  var isGetter = !!originalGet;\n\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n    get: function get() {\n      var fn = isGetter ? originalGet.call(this) : originalValue;\n      var value = decorator.call.apply(decorator, [this, fn].concat(_toConsumableArray(args)));\n\n      if (isGetter) {\n        return value;\n      } else {\n        var desc = {\n          configurable: configurable,\n          enumerable: enumerable\n        };\n\n        desc.value = value;\n        desc.writable = writable;\n\n        defineProperty(this, key, desc);\n\n        return value;\n      }\n    },\n\n    set: isGetter ? originalSet : createDefaultSetter()\n  };\n}\n\nexport default function decorate() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _decorate(handleDescriptor, args);\n}","function Similar() {\n\tthis.list = [];\n\tthis.lastItem = undefined;\n\tthis.size = 0;\n\n\treturn this;\n}\n\nSimilar.prototype.get = function(key) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\treturn this.lastItem.val;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.lastItem = this.list[index];\n\t\treturn this.list[index].val;\n\t}\n\n\treturn undefined;\n};\n\nSimilar.prototype.set = function(key, val) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\tthis.lastItem.val = val;\n\t\treturn this;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.lastItem = this.list[index];\n\t\tthis.list[index].val = val;\n\t\treturn this;\n\t}\n\n\tthis.lastItem = { key: key, val: val };\n\tthis.list.push(this.lastItem);\n\tthis.size++;\n\n\treturn this;\n};\n\nSimilar.prototype.delete = function(key) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\tthis.lastItem = undefined;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.size--;\n\t\treturn this.list.splice(index, 1)[0];\n\t}\n\n\treturn undefined;\n};\n\n\n// important that has() doesn't use get() in case an existing key has a falsy value, in which case has() would return false\nSimilar.prototype.has = function(key) {\n\tvar index;\n\n\tif (this.lastItem && this.isEqual(this.lastItem.key, key)) {\n\t\treturn true;\n\t}\n\n\tindex = this.indexOf(key);\n\tif (index >= 0) {\n\t\tthis.lastItem = this.list[index];\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nSimilar.prototype.forEach = function(callback, thisArg) {\n\tvar i;\n\tfor (i = 0; i < this.size; i++) {\n\t\tcallback.call(thisArg || this, this.list[i].val, this.list[i].key, this);\n\t}\n};\n\nSimilar.prototype.indexOf = function(key) {\n\tvar i;\n\tfor (i = 0; i < this.size; i++) {\n\t\tif (this.isEqual(this.list[i].key, key)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n// check if the numbers are equal, or whether they are both precisely NaN (isNaN returns true for all non-numbers)\nSimilar.prototype.isEqual = function(val1, val2) {\n\treturn val1 === val2 || (val1 !== val1 && val2 !== val2);\n};\n\nmodule.exports = Similar;","var MapOrSimilar = require('map-or-similar');\n\nmodule.exports = function (limit) {\n\tvar cache = new MapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === 'true'),\n\t\tlru = [];\n\n\treturn function (fn) {\n\t\tvar memoizerific = function () {\n\t\t\tvar currentCache = cache,\n\t\t\t\tnewMap,\n\t\t\t\tfnResult,\n\t\t\t\targsLengthMinusOne = arguments.length - 1,\n\t\t\t\tlruPath = Array(argsLengthMinusOne + 1),\n\t\t\t\tisMemoized = true,\n\t\t\t\ti;\n\n\t\t\tif ((memoizerific.numArgs || memoizerific.numArgs === 0) && memoizerific.numArgs !== argsLengthMinusOne + 1) {\n\t\t\t\tthrow new Error('Memoizerific functions should always be called with the same number of arguments');\n\t\t\t}\n\n\t\t\t// loop through each argument to traverse the map tree\n\t\t\tfor (i = 0; i < argsLengthMinusOne; i++) {\n\t\t\t\tlruPath[i] = {\n\t\t\t\t\tcacheItem: currentCache,\n\t\t\t\t\targ: arguments[i]\n\t\t\t\t};\n\n\t\t\t\t// climb through the hierarchical map tree until the second-last argument has been found, or an argument is missing.\n\t\t\t\t// if all arguments up to the second-last have been found, this will potentially be a cache hit (determined later)\n\t\t\t\tif (currentCache.has(arguments[i])) {\n\t\t\t\t\tcurrentCache = currentCache.get(arguments[i]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tisMemoized = false;\n\n\t\t\t\t// make maps until last value\n\t\t\t\tnewMap = new MapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === 'true');\n\t\t\t\tcurrentCache.set(arguments[i], newMap);\n\t\t\t\tcurrentCache = newMap;\n\t\t\t}\n\n\t\t\t// we are at the last arg, check if it is really memoized\n\t\t\tif (isMemoized) {\n\t\t\t\tif (currentCache.has(arguments[argsLengthMinusOne])) {\n\t\t\t\t\tfnResult = currentCache.get(arguments[argsLengthMinusOne]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tisMemoized = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if the result wasn't memoized, compute it and cache it\n\t\t\tif (!isMemoized) {\n\t\t\t\tfnResult = fn.apply(null, arguments);\n\t\t\t\tcurrentCache.set(arguments[argsLengthMinusOne], fnResult);\n\t\t\t}\n\n\t\t\t// if there is a cache limit, purge any extra results\n\t\t\tif (limit > 0) {\n\t\t\t\tlruPath[argsLengthMinusOne] = {\n\t\t\t\t\tcacheItem: currentCache,\n\t\t\t\t\targ: arguments[argsLengthMinusOne]\n\t\t\t\t};\n\n\t\t\t\tif (isMemoized) {\n\t\t\t\t\tmoveToMostRecentLru(lru, lruPath);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlru.push(lruPath);\n\t\t\t\t}\n\n\t\t\t\tif (lru.length > limit) {\n\t\t\t\t\tremoveCachedResult(lru.shift());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmemoizerific.wasMemoized = isMemoized;\n\t\t\tmemoizerific.numArgs = argsLengthMinusOne + 1;\n\n\t\t\treturn fnResult;\n\t\t};\n\n\t\tmemoizerific.limit = limit;\n\t\tmemoizerific.wasMemoized = false;\n\t\tmemoizerific.cache = cache;\n\t\tmemoizerific.lru = lru;\n\n\t\treturn memoizerific;\n\t};\n};\n\n// move current args to most recent position\nfunction moveToMostRecentLru(lru, lruPath) {\n\tvar lruLen = lru.length,\n\t\tlruPathLen = lruPath.length,\n\t\tisMatch,\n\t\ti, ii;\n\n\tfor (i = 0; i < lruLen; i++) {\n\t\tisMatch = true;\n\t\tfor (ii = 0; ii < lruPathLen; ii++) {\n\t\t\tif (!isEqual(lru[i][ii].arg, lruPath[ii].arg)) {\n\t\t\t\tisMatch = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isMatch) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlru.push(lru.splice(i, 1)[0]);\n}\n\n// remove least recently used cache item and all dead branches\nfunction removeCachedResult(removedLru) {\n\tvar removedLruLen = removedLru.length,\n\t\tcurrentLru = removedLru[removedLruLen - 1],\n\t\ttmp,\n\t\ti;\n\n\tcurrentLru.cacheItem.delete(currentLru.arg);\n\n\t// walk down the tree removing dead branches (size 0) along the way\n\tfor (i = removedLruLen - 2; i >= 0; i--) {\n\t\tcurrentLru = removedLru[i];\n\t\ttmp = currentLru.cacheItem.get(currentLru.arg);\n\n\t\tif (!tmp || !tmp.size) {\n\t\t\tcurrentLru.cacheItem.delete(currentLru.arg);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// check if the numbers are equal, or whether they are both precisely NaN (isNaN returns true for all non-numbers)\nfunction isEqual(val1, val2) {\n\treturn val1 === val2 || (val1 !== val1 && val2 !== val2);\n}","import BigNumber from 'bignumber.js';\nimport { autobind, decorate, deprecate } from 'core-decorators';\nimport memoize from 'memoizerific';\n\n// Cache original 'Date' class. User may set window.Date = NanoDate;\nif (typeof window === 'undefined') {\n  /* istanbul ignore next */\n  var BaseDate = Date;\n} else {\n  var BaseDate = window.Date;\n}\n\nconst ISO_8601_FULL = /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/i;\n\nconst MILLI_TO_NANO_DIFF = 1000000;\nconst DIGETS_IN_NANO = 19;\nconst DIGETS_IN_MILLI = 13;\nconst MINIMUM_DIGETS = DIGETS_IN_NANO - DIGETS_IN_MILLI;\n\nconst YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLI = 'milli';\nconst MICRO = 'micro';\nconst NANO = 'nano';\n\nconst DAYS = {\n  0: 31,\n  1: 28,\n  2: 31,\n  3: 30,\n  4: 31,\n  5: 30,\n  6: 31,\n  7: 31,\n  8: 30,\n  9: 31,\n  10: 30,\n  11: 31\n};\n\nconst DAYS_LEAP_YEAR = {\n  0: 31,\n  1: 29,\n  2: 31,\n  3: 30,\n  4: 31,\n  5: 30,\n  6: 31,\n  7: 31,\n  8: 30,\n  9: 31,\n  10: 30,\n  11: 31\n};\n\nfunction pad(num) {\n  return addZeros(num, num < 100 ? (num < 10 ? 2 : 1) : 0, true);\n}\n\nfunction padEndTo(num, toLen) {\n  return addZeros(num, 9 - `${num}`.length);\n}\n\nfunction addZeros(str, count = 0, front = false) {\n  if (count === 0) {\n    return str;\n  }\n  return addZeros(`${front ? '0' : ''}${str}${!front ? '0' : ''}`, count - 1, front);\n}\n\nfunction toNano(num) {\n  let str = `${num}`;\n  if (str.length <= DIGETS_IN_NANO) {\n    if (str.indexOf('.') > -1) {\n      str = num.toFixed(3);\n      return new BigNumber(str.replace('.', '') + '000');\n    }\n    return new BigNumber(str);\n  }\n  return new BigNumber(str.slice(0, DIGETS_IN_NANO));\n}\n\nfunction onlyDigits(num) {\n  return /^(-)?\\d+$/.test(`${num}`);\n}\n\nfunction leapYear(yearBase) {\n  const year = yearBase.toNumber();\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n\nfunction daysForYear(year) {\n  return leapYear(year) ? 366 : 365;\n}\n\nfunction daysForMonth(year, month) {\n  const days = leapYear(year) ? DAYS_LEAP_YEAR : DAYS;\n  return days[month.toNumber()];\n}\n\nfunction handleNotAnInteger(items, funcName, names, index = 0) {\n  const item = items[index];\n  const name = names[index];\n  if (typeof item !== 'number' || !onlyDigits(item)) {\n    throw new Error(`Parameter ${name} value for ${funcName} has to be an integer.`);\n  } else if (names.length > index && notUndefined(items[index + 1])) {\n    handleNotAnInteger(items, funcName, names, index + 1);\n  }\n}\n\nfunction notUndefined(item) {\n  return typeof item !== 'undefined';\n}\n\nconst passThroughMethods = [\n  'getFullYear',\n  'getYear',\n  'getMonth',\n  'getDate',\n  'getDay',\n  'getHours',\n  'getMinutes',\n  'getSeconds',\n  'getMilliseconds',\n  'getUTCFullYear',\n  'getUTCYear',\n  'getUTCMonth',\n  'getUTCDate',\n  'getUTCDay',\n  'getUTCHours',\n  'getUTCMinutes',\n  'getUTCSeconds',\n  'getUTCMilliseconds',\n  'toDateString',\n  'toLocaleDateString',\n  'toLocaleString',\n  'toTimeString',\n  'toLocaleTimeString',\n  'toISOString',\n  'getTimezoneOffset'\n];\n\n@autobind\nclass NanoDate {\n  constructor(a, b, c, d, e, f, g, h) {\n    if (typeof a === 'string') {\n      this._full = onlyDigits(a) ? toNano(a) : toNano(new BaseDate(a).valueOf() * MILLI_TO_NANO_DIFF);\n    } else if (arguments.length === 0) {\n      this._full = toNano(new BaseDate().valueOf() * MILLI_TO_NANO_DIFF);\n    } else if (arguments.length === 1) {\n      if (a instanceof NanoDate) {\n        this._full = a._full;\n      } else if (a instanceof BaseDate) {\n        this._full = toNano(a.valueOf() * MILLI_TO_NANO_DIFF);\n      } else if (typeof a === 'number') {\n        let multi = MILLI_TO_NANO_DIFF;\n        if (`${a}`.indexOf('.') > -1) {\n          multi = 1;\n        }\n        this._full = toNano(a * multi);\n      } else {\n        throw Error('Input not of any type that can be converted to a date');\n      }\n    } else {\n      let date;\n      if (typeof a === 'boolean') {\n        date = BaseDate.UTC(b, c || 0, d || 0, e || 0, f || 0, g || 0, h || 0);\n      } else {\n        date = new BaseDate(a, b, c || 0, d || 0, e || 0, f || 0, g || 0);\n      }\n      this._full = toNano(date.valueOf() * MILLI_TO_NANO_DIFF);\n    }\n\n    this._setupFunctions();\n\n    if (typeof a === 'string' && ISO_8601_FULL.test(a) && a.indexOf('.') > -1) {\n      const match = a.match(ISO_8601_FULL);\n      if (typeof match[1] !== 'undefined') {\n        const padded = padEndTo(match[1].replace('.', ''), 9);\n        let nanos = parseInt(padded, 10);\n\n        // set milliseconds\n        if (nanos > 0) {\n          this.setMilliseconds(Math.floor(nanos / MILLI_TO_NANO_DIFF));\n          nanos = nanos % MILLI_TO_NANO_DIFF;\n        }\n\n        // set microseconds\n        if (nanos > 0) {\n          this.setMicroseconds(Math.floor(nanos / 1000));\n          nanos = nanos % 1000;\n        }\n\n        // set nanoseconds\n        if (nanos > 0) {\n          this.setNanoseconds(Math.floor(nanos));\n        }\n      }\n    }\n\n    this.proxy = new Proxy(this, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          return obj[prop];\n        } else if (passThroughMethods.indexOf(prop) > -1) {\n          return this._date[prop];\n        } else {\n          const build = this._buildSetFunction;\n          switch (prop) {\n            case 'setUTCNanoseconds':\n            case 'setNanoseconds':\n              return build(\n                'setNanoseconds',\n                ['nanosecond'],\n                this.getUTCNanoseconds,\n                NANO\n              );\n            case 'setUTCMicroseconds':\n            case 'setMicroseconds':\n              return build(\n                'setMicoseconds',\n                ['microsecond', 'nanosecond'],\n                this.getUTCMicroseconds,\n                MICRO,\n                this.proxy.setUTCNanoseconds\n              );\n            case 'setUTCMilliseconds':\n            case 'setMilliseconds':\n              return build(\n                'setMilliseconds',\n                ['millisecond', 'microsecond', 'nanosecond'],\n                this.getUTCMilliseconds,\n                MILLI,\n                this.proxy.setUTCMicroseconds\n              );\n            case 'setUTCSeconds':\n              return build(\n                'setUTCSeconds',\n                ['second', 'millisecond', 'microsecond', 'nanosecond'],\n                this.getUTCSeconds,\n                SECOND,\n                this.proxy.setUTCMilliseconds,\n                true\n              );\n            case 'setSeconds':\n              return build(\n                'setSeconds',\n                ['second', 'millisecond', 'microsecond', 'nanosecond'],\n                this.getSeconds,\n                SECOND,\n                this.proxy.setMilliseconds\n              );\n            case 'setUTCMinutes':\n              return build(\n                'setUTCMinutes',\n                ['minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n                this.getUTCMinutes,\n                MINUTE,\n                this.proxy.setUTCSeconds,\n                true\n              );\n            case 'setMinutes':\n              return build(\n                'setMinutes',\n                ['minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n                this.getMinutes,\n                MINUTE,\n                this.proxy.setSeconds\n              );\n            case 'setUTCHours':\n              return build(\n                'setUTCHours',\n                ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n                this.getUTCHours,\n                HOUR,\n                this.proxy.setUTCMinutes,\n                true\n              );\n            case 'setHours':\n              return build(\n                'setHours',\n                ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'],\n                this.getHours,\n                HOUR,\n                this.proxy.setMinutes\n              );\n            case 'setUTCDate':\n              return build(\n                'setUTCDate',\n                ['day'],\n                this.getUTCDate,\n                DAY,\n                () => {},\n                true\n              );\n            case 'setDate':\n              return build(\n                'setDate',\n                ['day'],\n                this.getDate,\n                DAY\n              );\n            case 'setUTCMonth':\n              return build(\n                'setUTCMonth',\n                ['month', 'day'],\n                this.getUTCMonth,\n                MONTH,\n                this.proxy.setUTCDate,\n                true\n              );\n            case 'setMonth':\n              return build(\n                'setMonth',\n                ['month', 'day'],\n                this.getMonth,\n                MONTH,\n                this.proxy.setDate\n              );\n            case 'setUTCFullYear':\n              return build(\n                'setUTCFullYear',\n                ['year', 'month', 'day'],\n                this.getUTCFullYear,\n                YEAR,\n                this.proxy.setUTCMonth,\n                true\n              );\n            case 'setFullYear':\n              return build(\n                'setFullYear',\n                ['year', 'month', 'day'],\n                this.getFullYear,\n                YEAR,\n                this.proxy.setMonth\n              );\n          }\n        }\n      }\n    })\n\n    return this.proxy;\n  }\n\n  @decorate(memoize(100))\n  _buildSetFunction(name, argumentNames, getMethod, valueKey, moreVarsFunc = () => {}, utc = false) {\n    function setFunction(...args) {\n      handleNotAnInteger(args, name, argumentNames);\n      const currentValue = getMethod();\n      if (currentValue !== args[0]) {\n        if (currentValue < args[0]) {\n          const v = this._getValue.call(this, this, valueKey, args[0] - currentValue, utc);\n          this._full = this._full.plus(v).truncated();\n        } else {\n          const v = this._getValue.call(this, this, valueKey, currentValue - args[0], utc);\n          this._full = this._full.minus(v).truncated();\n        }\n\n        if (args.length === 1 || (args.length > 1 && !notUndefined(args[1]))) {\n          this._setupFunctions.call(this);\n        }\n      }\n\n      if (args.length > 1 && notUndefined(args[1])) {\n        args.shift();\n        moreVarsFunc.apply(this, args);\n      }\n\n      return getMethod();\n    }\n\n    Object.defineProperty(setFunction, 'name', { value: name, writable: false });\n\n    return setFunction.bind(this);\n  }\n\n  _setupFunctions() {\n    this._date = new BaseDate(this.valueOf());\n  }\n\n  @decorate(memoize(250))\n  _getDaysBetween(a, b, func) {\n    if (a.eq(b)) { return new BigNumber(0); }\n    let days = new BigNumber(0);\n    const diff = a.lt(b) ? 1 : -1;\n    let start = new BigNumber(a);\n    while (!start.eq(b)) {\n      const val = func(start);\n      days = days.plus(val);\n      start = start.plus(diff);\n    }\n    return days.times(diff);\n  }\n\n  _getFullYear(utc) {\n    return utc ? this.getUTCFullYear() : this.getFullYear();\n  }\n\n  _getDate(utc) {\n    return utc ? this.getUTCDate() : this.getDate();\n  }\n\n  _getMonth(utc) {\n    return utc ? this.getUTCMonth() : this.getMonth();\n  }\n\n  _getDays(unit, utc = false) {\n    const currentYear = new BigNumber(this._getFullYear(utc));\n    let base = new BigNumber(unit);\n    let res = new BigNumber(this._getDate(utc)).minus(1);\n    if (unit >= 12) {\n      const years = base.dividedToIntegerBy(12);\n      const start = new BigNumber(currentYear);\n      const end = start.plus(years);\n      res = this._getDaysBetween(start, end, daysForYear);\n      base = base.plus(years.times(12).times(base.lessThan(0) ? 1 : -1));\n    }\n\n    const month = new BigNumber(this._getMonth(utc));\n    let diff = month.plus(base);\n    if (diff.greaterThan(11)) {\n      diff = month.minus(base);\n    }\n    // console.log('days between', res.toNumber(), diff.toNumber(), month.toNumber());\n    if (diff.lessThan(month)) {\n      return res.plus(this._getDaysBetween(diff, month, daysForMonth.bind(null, currentYear)));\n    }\n    return res.plus(this._getDaysBetween(month, diff, daysForMonth.bind(null, currentYear)));\n  }\n\n  @decorate(memoize(100))\n  _getValue(scope, type, unit, utc = false) {\n    const numUnit = new BigNumber(unit);\n    switch (type) {\n      case YEAR:\n        return scope._getValue(scope, MONTH, numUnit.times(12), utc);\n      case MONTH:\n        return scope._getValue(scope, DAY, scope._getDays(numUnit, utc), utc);\n      case DAY:\n        return scope._getValue(scope, HOUR, numUnit.times(24), utc);\n      case HOUR:\n        return scope._getValue(scope, MINUTE, numUnit.times(60), utc);\n      case MINUTE:\n        return scope._getValue(scope, SECOND, numUnit.times(60), utc);\n      case SECOND:\n        return scope._getValue(scope, MILLI, numUnit.times(1000), utc);\n      case MILLI:\n        return scope._getValue(scope, MICRO, numUnit.times(1000), utc);\n      case MICRO:\n        return scope._getValue(scope, NANO, numUnit.times(1000), utc);\n      case NANO:\n      default:\n        return numUnit;\n    }\n  }\n\n  static now() {\n    return (new NanoDate()).valueOf();\n  }\n\n  static parse(...args) {\n    return BaseDate.parse(...args);\n  }\n\n  static UTC(...args) {\n    return new NanoDate(true, ...args);\n  }\n\n  getTime() {\n    return this._full.toString();\n  }\n\n  valueOf() {\n    return this._full.dividedBy(MILLI_TO_NANO_DIFF).truncated().toNumber();\n  }\n\n  valueOfWithMicro() {\n    return parseFloat(`${this.valueOf()}.${pad(this.getMicroseconds())}`, 10);\n  }\n\n  valueOfWithNano() {\n    return `${this.valueOfWithMicro().toFixed(3)}${pad(this.getNanoseconds())}`;\n  }\n\n  getMicroseconds() {\n    return this._full\n      .minus(this.valueOf() * MILLI_TO_NANO_DIFF)\n      .dividedBy(1000)\n      .truncated()\n      .toNumber();\n  }\n\n  getUTCMicroseconds() {\n    return this.getMicroseconds();\n  }\n\n  getNanoseconds() {\n    return this._full\n      .minus(this.valueOf() * MILLI_TO_NANO_DIFF)\n      .minus(this.getMicroseconds() * 1000)\n      .truncated()\n      .toNumber();\n  }\n\n  getUTCNanoseconds() {\n    return this.getNanoseconds();\n  }\n\n  setTime(time) {\n    this._full = toNano(time);\n    this._setupFunctions();\n    return time;\n  }\n\n  setUTCTime(time) {\n    return this.setTime(time);\n  }\n\n  _toString(funcName) {\n    const split = this._date[funcName]().split(' GMT');\n    const milli = this.getMilliseconds();\n    const micro = this.getMicroseconds();\n    const nano = this.getNanoseconds();\n    split[0] += `.${pad(milli)}${pad(micro)}${pad(nano)}`;\n    return split.join(' GMT');\n  }\n\n  toString() {\n    return this._toString('toString');\n  }\n\n  toUTCString() {\n    return this._toString('toUTCString');\n  }\n\n  toISOStringFull() {\n    const micro = this.getMicroseconds();\n    const nano = this.getNanoseconds();\n    return this._date.toISOString().replace('Z', `${pad(micro)}${pad(nano)}Z`);\n  }\n\n  @deprecate('Use toUTCString() instead')\n  toGMTString() {\n    return this.toUTCString();\n  }\n\n}\n\nexport default NanoDate;\n","/*! bignumber.js v4.0.4 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v4.0.4\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(config) {\r\n        var div, parseNumeric,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n                    raise( id, tooManyDigits, x.s * n );\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc = [1].concat(xc);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x = [carry].concat(x);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.splice(0, 1) );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz = [0].concat(yz);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod = [0].concat(prod);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.splice(0, 1);\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.splice(0, 1), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc = [a].concat(xc);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.splice(0, 1);\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function ( n, m ) {\r\n            var k, y, z,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            if ( m != null ) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n                k = Math.pow( +x, n );\r\n                return new BigNumber( m ? k % m : k );\r\n            }\r\n\r\n            if (m) {\r\n                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if (k) {\r\n                        if ( y.c.length > k ) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if ( n < 0 ) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        P.isBigNumber = true;\r\n\r\n        if ( config != null ) BigNumber.config(config);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { decorate } from './private/utils';\n\nvar labels = {};\n\n// Exported for mocking in tests\nexport var defaultConsole = {\n  time: console.time ? console.time.bind(console) : function (label) {\n    labels[label] = new Date();\n  },\n  timeEnd: console.timeEnd ? console.timeEnd.bind(console) : function (label) {\n    var timeNow = new Date();\n    var timeTaken = timeNow - labels[label];\n    delete labels[label];\n    console.log(label + ': ' + timeTaken + 'ms');\n  }\n};\n\nvar count = 0;\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      _ref2$ = _ref2[0],\n      prefix = _ref2$ === undefined ? null : _ref2$,\n      _ref2$2 = _ref2[1],\n      console = _ref2$2 === undefined ? defaultConsole : _ref2$2;\n\n  var fn = descriptor.value;\n\n  if (prefix === null) {\n    prefix = target.constructor.name + '.' + key;\n  }\n\n  if (typeof fn !== 'function') {\n    throw new SyntaxError('@time can only be used on functions, not: ' + fn);\n  }\n\n  return _extends({}, descriptor, {\n    value: function value() {\n      var label = prefix + '-' + count;\n      count++;\n      console.time(label);\n\n      try {\n        return fn.apply(this, arguments);\n      } finally {\n        console.timeEnd(label);\n      }\n    }\n  });\n}\n\nexport default function time() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport { decorate, metaFor, warn, bind } from './private/utils';\n\nvar oc = console;\n\n// Exported for mocking in tests\nexport var defaultConsole = {\n  profile: console.profile ? bind(console.profile, console) : function () {},\n  profileEnd: console.profileEnd ? bind(console.profileEnd, console) : function () {},\n  warn: warn\n};\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      _ref2$ = _ref2[0],\n      prefix = _ref2$ === undefined ? null : _ref2$,\n      _ref2$2 = _ref2[1],\n      onceThrottleOrFunction = _ref2$2 === undefined ? false : _ref2$2,\n      _ref2$3 = _ref2[2],\n      console = _ref2$3 === undefined ? defaultConsole : _ref2$3;\n\n  if (!profile.__enabled) {\n    if (!profile.__warned) {\n      console.warn('console.profile is not supported. All @profile decorators are disabled.');\n      profile.__warned = true;\n    }\n    return descriptor;\n  }\n\n  var fn = descriptor.value;\n\n  if (prefix === null) {\n    prefix = target.constructor.name + '.' + key;\n  }\n\n  if (typeof fn !== 'function') {\n    throw new SyntaxError('@profile can only be used on functions, not: ' + fn);\n  }\n\n  return _extends({}, descriptor, {\n    value: function value() {\n      var now = Date.now();\n      var meta = metaFor(this);\n      if (onceThrottleOrFunction === true && !meta.profileLastRan || onceThrottleOrFunction === false || typeof onceThrottleOrFunction === 'number' && now - meta.profileLastRan > onceThrottleOrFunction || typeof onceThrottleOrFunction === 'function' && onceThrottleOrFunction.apply(this, arguments)) {\n        console.profile(prefix);\n        meta.profileLastRan = now;\n      }\n\n      try {\n        return fn.apply(this, arguments);\n      } finally {\n        console.profileEnd(prefix);\n      }\n    }\n  });\n}\n\nexport default function profile() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}\n\n// Only Chrome, Firefox, and Edge support profile.\n// Exposing properties for testing.\nprofile.__enabled = !!console.profile;\nprofile.__warned = false;","module.exports = function(forceSimilar) {\n\tif (typeof Map !== 'function' || forceSimilar) {\n\t\tvar Similar = require('./similar');\n\t\treturn new Similar();\n\t}\n\telse {\n\t\treturn new Map();\n\t}\n}\n"],"names":["handleDescriptor","target","key","descriptor","configurable","enumerable","initializer","value","get","this","ret","call","defineProperty","writable","set","createDefaultSetter","lazyInitialize","_len","arguments","length","args","Array","_key","decorate","_initDefineProp","property","context","Object","_classCallCheck","instance","Constructor","TypeError","_applyDecoratedDescriptor","decorators","desc","forEach","slice","reverse","reduce","decorator","undefined","_toConsumableArray","arr","isArray","i","arr2","from","isDescriptor","hasOwnProperty","keys","l","entryArgs","apply","concat","prototype","getOwnPropertyDescriptors","obj","descs","getOwnKeys","getOwnPropertyDescriptor","newValue","bind","fn","_ref","_ref2","_slicedToArray","_ref2$","msg","DEFAULT_MSG","_ref2$2","options","SyntaxError","methodSignature","constructor","name","url","_extends","warn","getBoundSuper","WeakMap","Error","mapStore","has","superStore","autobindClass","klass","autobindMethod","getPrototypeOf","boundFn","handle","_toArray","originalGet","originalSet","originalValue","isGetter","_decorate","Similar","list","lastItem","size","moveToMostRecentLru","lru","lruPath","isMatch","ii","lruLen","lruPathLen","isEqual","arg","push","splice","removeCachedResult","removedLru","tmp","removedLruLen","currentLru","cacheItem","delete","val1","val2","pad","num","addZeros","padEndTo","toLen","str","count","front","toNano","DIGETS_IN_NANO","indexOf","toFixed","BigNumber","replace","onlyDigits","test","leapYear","yearBase","year","toNumber","daysForYear","daysForMonth","month","DAYS_LEAP_YEAR","DAYS","handleNotAnInteger","items","funcName","names","index","item","notUndefined","_class","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","globalObj","constructorFactory","config","n","b","c","e","len","x","ERRORS","raise","isValidInt","id","round","DECIMAL_PLACES","ROUNDING_MODE","RegExp","ALPHABET","parseNumeric","s","tooManyDigits","charCodeAt","convertBase","isNumeric","search","substring","MAX_SAFE_INTEGER","mathfloor","MAX_EXP","MIN_EXP","LOG_BASE","baseOut","baseIn","sign","d","k","r","xc","y","dp","rm","toLowerCase","POW_PRECISION","pow","toBaseOut","toFixedPoint","coeffToString","pop","div","charAt","format","caller","c0","ne","roundingMode","toString","TO_EXP_NEG","toExponential","maxOrMin","method","m","intValidatorWithErrors","min","max","truncate","normalise","j","val","error","sd","ni","rd","pows10","POWS_TEN","out","mathceil","BASE","P","ONE","TO_EXP_POS","CRYPTO","MODULO_MODE","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","another","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","v","p","a","o","MAX","intValidatorNoErrors","notBool","crypto","getRandomValues","randomBytes","lt","gt","random","random53bitInt","Math","rand","Uint32Array","copy","multiply","base","temp","xlo","xhi","carry","klo","SQRT_BASE","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","ceil","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","floor","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","minus","sub","t","xLTy","plus","xe","ye","modulo","mod","times","negated","neg","add","precision","z","shift","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFormat","split","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","isBigNumber","arrL","module","exports","self","Function","_typeof","Symbol","iterator","getOwnPropertyNames","getOwnPropertySymbols","Meta","object","console","_createClass","defineProperties","props","protoProps","staticProps","FUNCTION_REGEXP","SyntaxErrorReporter","parentKlass","childKlass","parentDescriptor","childDescriptor","topic","_extractFunctionSignature","_this","match","parentPropertySignature","childPropertySignature","_getTopic","_extractTopicSignature","parentTopic","childTopic","condition","_this2","parentNotation","childNotation","assign","source","sliceIterator","_arr","_n","_d","_e","_s","_i","next","done","err","labels","time","timeEnd","profile","profileEnd","callback","thisArg","forceSimilar","Map","require$$0","limit","cache","MapOrSimilar","FORCE_SIMILAR_INSTEAD_OF_MAP","memoizerific","newMap","fnResult","currentCache","argsLengthMinusOne","isMemoized","numArgs","wasMemoized","window","BaseDate","Date","ISO_8601_FULL","MILLI_TO_NANO_DIFF","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLI","MICRO","NANO","passThroughMethods","memoize","f","g","h","_full","NanoDate","multi","date","UTC","_setupFunctions","padded","nanos","parseInt","setMilliseconds","setMicroseconds","setNanoseconds","proxy","Proxy","prop","_date","build","_buildSetFunction","getUTCNanoseconds","getUTCMicroseconds","setUTCNanoseconds","getUTCMilliseconds","setUTCMicroseconds","getUTCSeconds","setUTCMilliseconds","getSeconds","getUTCMinutes","setUTCSeconds","getMinutes","setSeconds","getUTCHours","setUTCMinutes","getHours","setMinutes","getUTCDate","getDate","getUTCMonth","setUTCDate","getMonth","setDate","getUTCFullYear","setUTCMonth","getFullYear","setMonth","argumentNames","getMethod","valueKey","setFunction","currentValue","_getValue","utc","moreVarsFunc","func","days","diff","start","unit","currentYear","_getFullYear","res","_getDate","years","end","_getDaysBetween","_getMonth","scope","type","numUnit","_getDays","getMicroseconds","valueOfWithMicro","getNanoseconds","setTime","milli","getMilliseconds","micro","nano","join","_toString","toISOString","toUTCString","parse"],"mappings":"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"}